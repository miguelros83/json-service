#labels Featured
#sidebar TableOfContents

=JSON Service=

A HTTP+JSON web service that adheres to the JSON Service standard makes information about itself, or _meta-information_, available via JSON.

This web service meta-information JSON is in the form of a descriptor, and the format of this descriptor can itself be described using a [http://json-schema.org JSON Schema].

The JSON Service standard enforces no URL scheme, as per the [http://en.wikipedia.org/wiki/HATEOAS HATEOAS] constraint of REST.

_Currently, the standard is undergoing development._

==JSON Service Descriptor==

The JSON Service Descriptor is a JSON document returned as the result of a HTTP GET. 

<code language="html">
GET /some/service/descriptor HTTP/1.1
Accept: application/json</code>

Mandatory headers:

<code language="html">
HTTP/1.1 200 OK
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Content-Type: application/json; charset=UTF-8; describedby=http://json-service.googlecode.com/svn/trunk/json-service-descriptor-schema.json
</code>

As shown by the Content-Type header, the descriptor must conform to the [http://json-service.googlecode.com/svn/trunk/json-service-descriptor-schema.json JSON Service Descriptor Schema], which in [http://orderly-json.org Orderly] representation is:

<code language="html">
object {
  string url;
  string label;
  string description;
  array { string; } tags?;
  string publisherName;
  string publisherUrl;
  string version /\d+.\d+/;
  array { string /\d+.\d+/; } availableVersions?;
  array {
    object{
      string id;
      string label;
      string description;
      string urlTemplate;
      array {
        object {
          string name;
          string pattern?;
          string description;
        }  
      } urlVariables;
      array {
        object {
          string verb;
          string label;
          string description;
          array { 
            object {
              string name;
              string pattern?;
              string description;
            };
          }  customHeaders;
          string inputSchemaUrl?;
          array { string; }  requiredCookies;
          array {
            object {
              integer statusCode;
              string description;
              array { string; }  setCookies;
              array { 
                object {
                  string name;
                  string pattern?;
                  string description;
                };  
              }  customHeaders;
              string outputSchemaUrl?;
            };
          } responses;
        };
      } actions;
    }
  } resources;
  object {
    string mixinMetaInformationSchema;
    boolean isNonFunctional;
  } mixinInformation?;
  array {
    object {
      string url;
      string version /\d+.\d+/?;
      string metaInformationUrl;
      array {
        object { 
          string mixinResourceId;
          string resourceId; 
        };
      } resourceIdMaps?;
    };
  } implementedMixins?;
}*;
</code>


==JSON Service Versioning==

Services may, optionally, offer versioning as per the descriptor; if so:

  * a version of type `[major version].[minor version]` can be passed in via the query string, optionally (example below)
    * not passed in through HTTP Headers so responses can be cached.
  * Must always be the prefix of the query string of form v`[maj].[min]`
  * Should use a semi-colon or ampersand afterwards if other content follows.
  * there must be a Version response header.
  * available versions must be detailed in the descriptor as per the schema;
  * If the version requested is ever not available, HTTP Code 412 (Precondition Failed) should be returned, with an explanatory status line.

===Most recent (stable) version example===

<code language="html">
GET /some/service/descriptor HTTP/1.1
Accept: application/json
</code>

<code language="html">
HTTP/1.1 200 OK
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Content-Type: application/json; charset=UTF-8; describedby=http://json-service.googlecode.com/svn/trunk/json-service-descriptor-schema.json
Version: 2.0

...
</code>

===Named version example===

<code language="html">
GET /some/service/descriptor?v1.0 HTTP/1.1
Accept: application/json
</code>

<code language="html">
HTTP/1.1 200 OK
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Content-Type: application/json; charset=UTF-8; describedby=http://json-service.googlecode.com/svn/trunk/json-service-descriptor-schema.json
Version: 1.0

...
</code>

==JSON Service Execution==

Note that you should include describedby in the Content-Type response header.

<code language="html">
POST /some/service/id4454 HTTP/1.1
Accept: application/json

{ "a":0, "b":"foo", "c":"23skidoo" }</code>

<code language="html">
HTTP/1.1 200 OK
Last-Modified: Wed, 08 Jan 2003 23:11:55 GMT
Content-Type: application/json; charset=UTF-8; describedby=http://domain.com/post-output-schema

{"ok":true}</code>

==Mixins==

If a service is defined in the descriptor above to implement an JSON Service URL X, that means that:

  * X in this context is termed a mixin;
  * each resource in X, must be mapped to a resource in the service, and:
    * by default they are mapped to resources with the same id;
  * each action defined at the mixin URL must be supported by the implementing service;
  * for any resource-verb, the service may extend the input/output schema of the mixin:
    * if the schema of the mixin allows;
    * if mixin input/output schema validates X, the extended schema must validate X;
    * see the JSON schema [http://tools.ietf.org/html/draft-zyp-json-schema-01#section-5.24 extends] keyword.

Mixins may be functional, but they are not necessarily - if not, they should declare such in the mixinInformation object in their descriptor.

A mixin may wish implementations to provide extra meta-information. For example, for an image resizing service interface, an implementing service may have to define what file types is supports, or the maximum size of file. If a mixin wishes to define required extra meta-information this is in the form of a JSON schema, the URL of which is defined within the mixinInformation  object in the descriptor.

An implementation of a mixin then must provide this meta-information at the URL in their descriptor.

===Implications===

This allows us to create standard service "interfaces". Effectively, *people can start creating new open standards for every service from image resizing to text analysis*, and implementations can be chosen at run time, and configured on the fly, as given a JSON Service Descriptor URL, you can see what mixins it implements from the descriptor. 

This is subtle at first, but incredibly powerful in its implications. 

Note implementation is transitive, i.e. A implements B and B implements C => A implements C.

=JSON Service Registries=

A JSON Service registry is a URL that upon GET with content type application/json simply provides a structured collection of JSON Service URLs, in accordance with the [http://json-service.googlecode.com/svn/trunk/json-service-registry-schema.json JSON Registry Schema] detailed below in http://orderly-json.org Orderly] representation. Note that the schema supports service taxonomies in the form a/b/c.

<code language="cpp">
array {
  object {
    string url;
    array {
      array {
        string;
      }
    } taxonomyLocations;
  };
};</code>

=Overloading=

All URLs described in this document may be overloaded, e.g. to provide a HTML interface, but must work as described in this document when the HTTP request "Accept" header is set as application/json.